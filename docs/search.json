[
  {
    "objectID": "vignettes/dndR_Vignette.html#welcome-to-dndr",
    "href": "vignettes/dndR_Vignette.html#welcome-to-dndr",
    "title": "dndR_Vignette",
    "section": "Welcome to dndR!",
    "text": "Welcome to dndR!\nI am a big fan of both R and Dungeons and Dragons so I thought it would be a fun test of my coding skills to build an R package that supports this hobby! dndR includes several functions that can be broadly divided between functions for both players and dungeon masters (DMs) and functions that are intended primarily for DMs.\nIf any of these functions break for you, please post an Issue and I’ll tweak the code ASAP. I hope that you enjoy the rest of this vignette as it demonstrates some of the use-cases for the functions currently included in dndR!\nBegin by ensuring that you have the development version of dndR installed.\n\n# devtools::install_github(\"njlyon0/dndR\")\nlibrary(dndR)"
  },
  {
    "objectID": "vignettes/dndR_Vignette.html#dice-rolling",
    "href": "vignettes/dndR_Vignette.html#dice-rolling",
    "title": "dndR_Vignette",
    "section": "Dice Rolling",
    "text": "Dice Rolling\nAt its simplest, DnD involves significant amounts of dice rolling and (often) summing their values, so dndR includes a roll function! This function supports ‘rolling’ up to 10 million of any of the standard dice and summing their results. “Standard” dice include the following numbers of sides: 100, 20, 12, 10, 8, 6, 4, and 2.\n\ndndR::roll('3d6')\n#> [1] 12\ndndR::roll('3d8') + dndR::roll('1d4')\n#> [1] 17\n\nNote that ‘2d20’ is automatically assumed to be rolling with advantage/disadvantage so it will return a message to that effect and both numbers.\n\ndndR::roll(dice = '2d20')\n#> Assuming you're rolling for (dis)advantage so both rolls returned.\n#>   roll_1 roll_2\n#> 1      1      4"
  },
  {
    "objectID": "vignettes/dndR_Vignette.html#character-creation",
    "href": "vignettes/dndR_Vignette.html#character-creation",
    "title": "dndR_Vignette",
    "section": "Character Creation",
    "text": "Character Creation\npc_creator rolls for a character’s ability scores (strength, dexterity, constitution, intelligence, wisdom, and charisma) given a particular class, race, and preferred method of rolling for ability scores.\n\ndndR::pc_creator(class = 'barbarian', race = 'half orc', score_method = \"4d6\")\n#> Total score very low. Consider re-rolling?\n#>   ability raw_score race_modifier score roll_modifier\n#> 1     STR        13             2    15            +2\n#> 2     DEX        12             0    12            +1\n#> 3     CON        12             1    13            +1\n#> 4     INT        11             0    11             0\n#> 5     WIS        11             0    11             0\n#> 6     CHA         9             0     9            -1\n\nYou can check which classes and races are currently supported by pc_creator by running dnd_classes or dnd_races. If you have a class/race in mind that isn’t supported you can post an Issue and I’ll add that class/race’s stats to the function ASAP!\nWhile waiting for me to act on your Issue, you can run the simpler ability_scores function to simply roll for ability scores and manually assign them to specific abilities and handle race/class/background based modifiers yourself.\n\ndndR::ability_scores(method = \"4d6\")\n#>   ability score\n#> 1      V1    15\n#> 2      V2    13\n#> 3      V3    12\n#> 4      V4    11\n#> 5      V5    15\n#> 6      V6     9"
  },
  {
    "objectID": "vignettes/dndR_Vignette.html#encounter-balancing",
    "href": "vignettes/dndR_Vignette.html#encounter-balancing",
    "title": "dndR_Vignette",
    "section": "Encounter Balancing",
    "text": "Encounter Balancing\nWhen I am the Dungeon/Game Master (DM / GM) I find encounter balancing to be really difficult, in part because of the nest of inter-related tables and experience point multipliers outlined in the Dungeon Master’s Guide (DMG) that must be consulted for novice GMs such as myself. To help other newbies, dndR includes the xp_pool and xp_cost functions.\n\nExperience Point (XP) Thresholds\nThe difficulty of an encounter in DnD is affected by three things:\n\nLevel of characters\nNumber of characters in the party\nHow difficult the GM wants to make things for their players\n\nThe DMG handles this by providing experience point (XP) thresholds based on these three factors. All enemies are worth a pre-determined amount of XP so encounters are balanced by the DMG listing the total XP of all monsters in a given fight for every level of players, party size, and difficulty. That table is useful but a little dense to work through as you’re prepping potentially multiple encounters per session, so this is where xp_pool becomes useful.\nxp_pool returns the amount of XP the GM can ‘spend’ on monsters in a given encounter to ensure the difficulty is as desired based on the three factors identified above.\n\ndndR::xp_pool(party_level = 2, party_size = 4, difficulty = \"medium\")\n#> [1] 625\n\n\n\nXP Multipliers\nWhile it is crucial to know the amount of XP in available to the GM per encounter, it fails to account for the effect of the number of enemies. A fight versus a single monster worth 1000 XP is a very different proposition than a fight against four creatures each worth 250 XP even though the total XP is the same.\nThe DMG accounts for this by providing XP multipliers based on the number of monsters and the number of players. The same total monster XP is multiplied by a larger value for more monsters facing a smaller party than it would be for fewer monsters facing a larger party.\nSo, if you are using the DMG to balance an encounter you have to total up the XP of the monsters in an encounter and then go to a different part of the DMG where you can multiply that value by the multiplier in the relevant row of a second table which would then tell you the “actual” XP of the creatures you have selected. If you had too many or too few monsters you’d have to repeat this process iteratively until you identified the correct amount of “raw” XP to yield your desired “realized” XP in an encounter. Cumbersome, right?\ndndR provides an alternative to using the multiplier table in xp_cost. xp_cost requires the “raw” XP of the monsters you have selected, the number of monsters, and the number of player characters (PCs) and returns the “realized” XP. You can then quickly compare this with the value return by xp_pool to determine whether you need to add or remove creatures from your encounter.\n\ndndR::xp_cost(monster_xp = 1000, monster_count = 2, party_size = 3)\n#> [1] 1500\n\n\n\nQuick XP Demonstration\nLet’s say I am running a game for four players, all level 3, and I want to design a hard encounter for them and I want to use dndR to balance this encounter.\nTo begin, I’d identify the total XP I can spend to make an encounter this difficult.\n\ndndR::xp_pool(party_level = 3, party_size = 4, difficulty = 'hard')\n#> [1] 1112\n\nNow that I know my XP threshold, I can check the value of two monsters worth (total) 500 XP against that threshold.\n\ndndR::xp_cost(monster_xp = 500, monster_count = 2, party_size = 4)\n#> [1] 750\n\nI can see that I’m well under the XP threshold I have to play with so I can add a monster and see where that leaves me.\n\ndndR::xp_cost(monster_xp = 750, monster_count = 3, party_size = 4)\n#> [1] 1500\n\nA little over because of the multiplier, so let’s say I change my mind and keep three monsters but change their identity to one with a lower XP value.\n\ndndR::xp_cost(monster_xp = 600, monster_count = 3, party_size = 4)\n#> [1] 1200\n\nBasically right on target! I can now pick out my three monsters that total up to 600 XP raw and know that they will likely* make a hard encounter for my players! (* “Likely” because there is dice rolling involved and it is possible that the monsters roll well while my players roll badly or vice versa)."
  },
  {
    "objectID": "vignettes/dndR_Vignette.html#creating-monsters",
    "href": "vignettes/dndR_Vignette.html#creating-monsters",
    "title": "dndR_Vignette",
    "section": "Creating Monsters",
    "text": "Creating Monsters\nCreatures that you create can be a great way to add flavor to an encounter or can even form the centerpiece of a larger campaign arc! The monster_stats and monster_creator functions can help GMs to quickly stat out their homebrewed monsters.\n\nFinding Official Monster Statistics with monster_stats\nThe DMG provides a table (see p. 274) that gives the vital statistics of creatures based on their Challenge Rating (CR) but this table can be cumbersome to compare to Experience Points (you know, the things used to determine how hard an encounter will be for your party?). monster_stats streamlines this process by allowing you to input either the XP you want to spend on this creature (you can use the value returned by xp_cost) or the Challenge Rating (CR) if you know it. Once either XP or CR is provided, monster_stats returns the creature’s statistics as they appear in the DMG for a single creature of that difficulty.\n\ndndR::monster_stats(xp = 1000, cr = 4)\n#> CR and XP both specified, proceeding with CR\n#>   Challenge DMG_XP Prof_Bonus Armor_Class HP_Range HP_Average Attack_Bonus\n#> 1         4   1100          2          14  116-130        123            5\n#>   Save_DC\n#> 1      14\n\nChallenge Rating is more than a little esoteric so feel free to ignore that argument entirely if XP is more comfortable for you!\n\ndndR::monster_stats(xp = 8000)\n#>   Challenge DMG_XP Prof_Bonus Armor_Class HP_Range HP_Average Attack_Bonus\n#> 1        11   7200          4          17  221-235        228            8\n#>   Save_DC\n#> 1      17\n\n\n\nHomebrewing Custom Monsters with monster_creator\nIf you’d rather take a more customized approach, you can use monster_creator instead of monster_stats. This function follows the advice of Zee Bashew on how to build interesting, challenging monsters for your party. These monsters are built somewhat according to the Dungeon Master’s Guide for creating monsters, partly Zee’s YouTube video on homebrewing monsters based on the videogame The Witcher, and partly on my own intuition about scaling the difficulty of a creature. Creatures are spawned randomly so you may need to re-run the function several times (or mentally modify one or more parts of the output) to get a monster that fits your campaign and players. Each creature is provided with up to five damage resistances, up to two damage immunities, and a single vulnerability. This combination allows you to build complex and mysterious homebrew monsters with plenty of opportunities for the party to have to investigate around to discover the monster’s strengths and weaknesses before the final showdown.\n\ndndR::monster_creator(party_level = 5, party_size = 4)\n#>             statistic                                    value\n#> 1          Hit_Points                                       92\n#> 2         Armor_Class                                       16\n#> 3          Prof_Bonus                                        3\n#> 4        Attack_Bonus                                        7\n#> 5             Save_DC                                       16\n#> 6  Prof_Saving_Throws                                 INT; STR\n#> 7           Immune_to                           piercing; cold\n#> 8        Resistant_to lightning; force; slashing; acid; poison\n#> 9       Vulnerable_to                                     fire\n#> 10       STR_Modifier                                       +3\n#> 11       DEX_Modifier                                       +3\n#> 12       CON_Modifier                                       +1\n#> 13       INT_Modifier                                       +1\n#> 14       WIS_Modifier                                       +1\n#> 15       CHA_Modifier                                       +2\n\nNote that if you use monster_creator you may need to help your players identify the creature’s immunities and vulnerabilities before the actual confrontation with the creature to avoid sending them into a fight that is more difficult than your party can handle."
  },
  {
    "objectID": "vignettes/dndR_Vignette.html#dndr-versus-dmg-comparisons",
    "href": "vignettes/dndR_Vignette.html#dndr-versus-dmg-comparisons",
    "title": "dndR_Vignette",
    "section": "dndR versus DMG Comparisons",
    "text": "dndR versus DMG Comparisons\nSee below for some comparisons between my functions and the Dungeon Master’s Guide statistics they recapitulate.\n\nxp_pool vs. DMG\nThe DMG specifies the XP threshold per player for a given difficulty while my function asks for the average player level and the party size. This difference keeps the function streamlined and flexible for parties of any size.\nRather than embedding the DMG’s table for encounter XP, xp_pool actually uses the formula for the line defining the XP-party level curve implicit in the DMG. This has the added benefit of being able to handle non-integer values for average party_level.\nBelow is a comparison of the DMG’s XP-to-party level curve versus the one obtained by xp_pool.\n\n\n\ncr_convert vs. DMG\ncr_convert is embedded in the monster_stats function and is what allows that function to handle both CR and XP inputs. The DMG specifies the XP value of a monster of any CR from 0 to 30 so cr_convert uses the formula of that line to avoid querying the table for this conversion.\nBelow is the comparison of the DMG’s XP-to-CR curve and the one produced by cr_convert."
  },
  {
    "objectID": "players.html",
    "href": "players.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "dndR",
    "section": "",
    "text": "To learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "dms.html",
    "href": "dms.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  }
]