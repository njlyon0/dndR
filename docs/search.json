[
  {
    "objectID": "vignettes/dndR_Vignette.html#welcome-to-dndr",
    "href": "vignettes/dndR_Vignette.html#welcome-to-dndr",
    "title": "dndR_Vignette",
    "section": "Welcome to dndR!",
    "text": "Welcome to dndR!\nI am a big fan of both R and Dungeons and Dragons so I thought it would be a fun test of my coding skills to build an R package that supports this hobby! dndR includes several functions that can be broadly divided between functions for both players and dungeon masters (DMs) and functions that are intended primarily for DMs.\nIf any of these functions break for you, please post an Issue and I’ll tweak the code ASAP. I hope that you enjoy the rest of this vignette as it demonstrates some of the use-cases for the functions currently included in dndR!\nBegin by ensuring that you have the development version of dndR installed.\n\n# devtools::install_github(\"njlyon0/dndR\")\nlibrary(dndR)"
  },
  {
    "objectID": "vignettes/dndR_Vignette.html#dice-rolling",
    "href": "vignettes/dndR_Vignette.html#dice-rolling",
    "title": "dndR_Vignette",
    "section": "Dice Rolling",
    "text": "Dice Rolling\nAt its simplest, DnD involves significant amounts of dice rolling and (often) summing their values, so dndR includes a roll function! This function supports ‘rolling’ up to 10 million of any of the standard dice and summing their results. “Standard” dice include the following numbers of sides: 100, 20, 12, 10, 8, 6, 4, and 2.\n\ndndR::roll('3d6')\n#> [1] 11\ndndR::roll('3d8') + dndR::roll('1d4')\n#> [1] 18\n\nNote that ‘2d20’ is automatically assumed to be rolling with advantage/disadvantage so it will return a message to that effect and both numbers.\n\ndndR::roll(dice = '2d20')\n#> Assuming you're rolling for (dis)advantage so both rolls returned\n#>   roll_1 roll_2\n#> 1      9     16"
  },
  {
    "objectID": "vignettes/dndR_Vignette.html#character-creation",
    "href": "vignettes/dndR_Vignette.html#character-creation",
    "title": "dndR_Vignette",
    "section": "Character Creation",
    "text": "Character Creation\npc_creator rolls for a character’s ability scores (strength, dexterity, constitution, intelligence, wisdom, and charisma) given a particular class, race, and preferred method of rolling for ability scores.\n\ndndR::pc_creator(class = 'barbarian', race = 'half orc', score_method = \"4d6\")\n#>   ability raw_score race_modifier score roll_modifier\n#> 1     STR        16             2    18            +4\n#> 2     DEX         9             0     9            -1\n#> 3     CON        15             1    16            +3\n#> 4     INT        12             0    12            +1\n#> 5     WIS        11             0    11             0\n#> 6     CHA        14             0    14            +2\n\nYou can check which classes and races are currently supported by pc_creator by running dnd_classes or dnd_races. If you have a class/race in mind that isn’t supported you can post an Issue and I’ll add that class/race’s stats to the function ASAP!\nWhile waiting for me to act on your Issue, you can run the simpler ability_scores function to simply roll for ability scores and manually assign them to specific abilities and handle race/class/background based modifiers yourself.\n\ndndR::ability_scores(method = \"4d6\")\n#>   ability score\n#> 1      V1    10\n#> 2      V2    14\n#> 3      V3    11\n#> 4      V4    11\n#> 5      V5    16\n#> 6      V6     9"
  },
  {
    "objectID": "vignettes/dndR_Vignette.html#encounter-balancing",
    "href": "vignettes/dndR_Vignette.html#encounter-balancing",
    "title": "dndR_Vignette",
    "section": "Encounter Balancing",
    "text": "Encounter Balancing\nWhen I am the Dungeon/Game Master (DM / GM) I find encounter balancing to be really difficult, in part because of the nest of inter-related tables and experience point multipliers outlined in the Dungeon Master’s Guide (DMG) that must be consulted for novice GMs such as myself. To help other newbies, dndR includes the xp_pool and xp_cost functions.\n\nExperience Point (XP) Thresholds\nThe difficulty of an encounter in DnD is affected by three things:\n\nLevel of characters\nNumber of characters in the party\nHow difficult the GM wants to make things for their players\n\nThe DMG handles this by providing experience point (XP) thresholds based on these three factors. All enemies are worth a pre-determined amount of XP so encounters are balanced by the DMG listing the total XP of all monsters in a given fight for every level of players, party size, and difficulty. That table is useful but a little dense to work through as you’re prepping potentially multiple encounters per session, so this is where xp_pool becomes useful.\nxp_pool returns the amount of XP the GM can ‘spend’ on monsters in a given encounter to ensure the difficulty is as desired based on the three factors identified above.\n\ndndR::xp_pool(party_level = 2, party_size = 4, difficulty = \"medium\")\n#> [1] 625\n\n\n\nXP Multipliers\nWhile it is crucial to know the amount of XP in available to the GM per encounter, it fails to account for the effect of the number of enemies. A fight versus a single monster worth 1000 XP is a very different proposition than a fight against four creatures each worth 250 XP even though the total XP is the same.\nThe DMG accounts for this by providing XP multipliers based on the number of monsters and the number of players. The same total monster XP is multiplied by a larger value for more monsters facing a smaller party than it would be for fewer monsters facing a larger party.\nSo, if you are using the DMG to balance an encounter you have to total up the XP of the monsters in an encounter and then go to a different part of the DMG where you can multiply that value by the multiplier in the relevant row of a second table which would then tell you the “actual” XP of the creatures you have selected. If you had too many or too few monsters you’d have to repeat this process iteratively until you identified the correct amount of “raw” XP to yield your desired “realized” XP in an encounter. Cumbersome, right?\ndndR provides an alternative to using the multiplier table in xp_cost. xp_cost requires the “raw” XP of the monsters you have selected, the number of monsters, and the number of player characters (PCs) and returns the “realized” XP. You can then quickly compare this with the value return by xp_pool to determine whether you need to add or remove creatures from your encounter.\n\ndndR::xp_cost(monster_xp = 1000, monster_count = 2, party_size = 3)\n#> [1] 1500\n\n\n\nQuick XP Demonstration\nLet’s say I am running a game for four players, all level 3, and I want to design a hard encounter for them and I want to use dndR to balance this encounter.\nTo begin, I’d identify the total XP I can spend to make an encounter this difficult.\n\ndndR::xp_pool(party_level = 3, party_size = 4, difficulty = 'hard')\n#> [1] 1112\n\nNow that I know my XP threshold, I can check the value of two monsters worth (total) 500 XP against that threshold.\n\ndndR::xp_cost(monster_xp = 500, monster_count = 2, party_size = 4)\n#> [1] 750\n\nI can see that I’m well under the XP threshold I have to play with so I can add a monster and see where that leaves me.\n\ndndR::xp_cost(monster_xp = 750, monster_count = 3, party_size = 4)\n#> [1] 1500\n\nA little over because of the multiplier, so let’s say I change my mind and keep three monsters but change their identity to one with a lower XP value.\n\ndndR::xp_cost(monster_xp = 600, monster_count = 3, party_size = 4)\n#> [1] 1200\n\nBasically right on target! I can now pick out my three monsters that total up to 600 XP raw and know that they will likely* make a hard encounter for my players! (* “Likely” because there is dice rolling involved and it is possible that the monsters roll well while my players roll badly or vice versa)."
  },
  {
    "objectID": "vignettes/dndR_Vignette.html#creating-monsters",
    "href": "vignettes/dndR_Vignette.html#creating-monsters",
    "title": "dndR_Vignette",
    "section": "Creating Monsters",
    "text": "Creating Monsters\nCreatures that you create can be a great way to add flavor to an encounter or can even form the centerpiece of a larger campaign arc! The monster_stats and monster_creator functions can help GMs to quickly stat out their homebrewed monsters.\n\nFinding Official Monster Statistics with monster_stats\nThe DMG provides a table (see p. 274) that gives the vital statistics of creatures based on their Challenge Rating (CR) but this table can be cumbersome to compare to Experience Points (you know, the things used to determine how hard an encounter will be for your party?). monster_stats streamlines this process by allowing you to input either the XP you want to spend on this creature (you can use the value returned by xp_cost) or the Challenge Rating (CR) if you know it. Once either XP or CR is provided, monster_stats returns the creature’s statistics as they appear in the DMG for a single creature of that difficulty.\n\ndndR::monster_stats(xp = 1000, cr = 4)\n#> CR and XP both specified, proceeding with CR\n#>   Challenge DMG_XP Prof_Bonus Armor_Class HP_Range HP_Average Attack_Bonus\n#> 1         4   1100          2          14  116-130        123            5\n#>   Save_DC\n#> 1      14\n\nChallenge Rating is more than a little esoteric so feel free to ignore that argument entirely if XP is more comfortable for you!\n\ndndR::monster_stats(xp = 8000)\n#>   Challenge DMG_XP Prof_Bonus Armor_Class HP_Range HP_Average Attack_Bonus\n#> 1        11   7200          4          17  221-235        228            8\n#>   Save_DC\n#> 1      17\n\n\n\nHomebrewing Custom Monsters with monster_creator\nIf you’d rather take a more customized approach, you can use monster_creator instead of monster_stats. This function follows the advice of Zee Bashew on how to build interesting, challenging monsters for your party. These monsters are built somewhat according to the Dungeon Master’s Guide for creating monsters, partly Zee’s YouTube video on homebrewing monsters based on the videogame The Witcher, and partly on my own intuition about scaling the difficulty of a creature. Creatures are spawned randomly so you may need to re-run the function several times (or mentally modify one or more parts of the output) to get a monster that fits your campaign and players. Each creature is provided with up to five damage resistances, up to two damage immunities, and a single vulnerability. This combination allows you to build complex and mysterious homebrew monsters with plenty of opportunities for the party to have to investigate around to discover the monster’s strengths and weaknesses before the final showdown.\n\ndndR::monster_creator(party_level = 5, party_size = 4)\n#>             statistic                                       value\n#> 1          Hit_Points                                          92\n#> 2         Armor_Class                                          16\n#> 3          Prof_Bonus                                           3\n#> 4        Attack_Bonus                                           7\n#> 5             Save_DC                                          16\n#> 6  Prof_Saving_Throws                                    CHA; DEX\n#> 7           Immune_to                            poison; slashing\n#> 8        Resistant_to necrotic; thunder; force; piercing; psychic\n#> 9       Vulnerable_to                                   lightning\n#> 10                STR                                          +1\n#> 11                DEX                                          +1\n#> 12                CON                                          +1\n#> 13                INT                                          +1\n#> 14                WIS                                          +3\n#> 15                CHA                                          +2\n\nNote that if you use monster_creator you may need to help your players identify the creature’s immunities and vulnerabilities before the actual confrontation with the creature to avoid sending them into a fight that is more difficult than your party can handle."
  },
  {
    "objectID": "vignettes/dndR_Vignette.html#dndr-versus-dmg-comparisons",
    "href": "vignettes/dndR_Vignette.html#dndr-versus-dmg-comparisons",
    "title": "dndR_Vignette",
    "section": "dndR versus DMG Comparisons",
    "text": "dndR versus DMG Comparisons\nSee below for some comparisons between my functions and the Dungeon Master’s Guide statistics they recapitulate.\n\nxp_pool vs. DMG\nThe DMG specifies the XP threshold per player for a given difficulty while my function asks for the average player level and the party size. This difference keeps the function streamlined and flexible for parties of any size.\nRather than embedding the DMG’s table for encounter XP, xp_pool actually uses the formula for the line defining the XP-party level curve implicit in the DMG. This has the added benefit of being able to handle non-integer values for average party_level.\nBelow is a comparison of the DMG’s XP-to-party level curve versus the one obtained by xp_pool.\n\n\n\ncr_convert vs. DMG\ncr_convert is embedded in the monster_stats function and is what allows that function to handle both CR and XP inputs. The DMG specifies the XP value of a monster of any CR from 0 to 30 so cr_convert uses the formula of that line to avoid querying the table for this conversion.\nBelow is the comparison of the DMG’s XP-to-CR curve and the one produced by cr_convert."
  },
  {
    "objectID": "encounter-balance.html",
    "href": "encounter-balance.html",
    "title": "Balancing Encounters",
    "section": "",
    "text": "When I am the Dungeon/Game Master (DM / GM) I find encounter balancing to be really difficult, in part because of the nest of interrelated tables and experience point multipliers outlined in the Dungeon Master’s Guide (DMG) that must be consulted for novice GMs such as myself. To help other newbies, dndR includes two core functions aimed at simplifying encounter balancing."
  },
  {
    "objectID": "encounter-balance.html#experience-point-xp-thresholds",
    "href": "encounter-balance.html#experience-point-xp-thresholds",
    "title": "Balancing Encounters",
    "section": "Experience Point (XP) Thresholds",
    "text": "Experience Point (XP) Thresholds\nThe difficulty of an encounter in D&D is affected by three things:\n\nLevel of characters\nNumber of characters in the party\nHow difficult the GM wants to make things for their players\n\nThe DMG handles this by providing experience point (XP) thresholds based on these three factors. All enemies are worth a pre-determined amount of XP so encounters are balanced by the DMG listing the total XP of all monsters in a given fight for every level of players, party size, and difficulty. That table is useful but a little dense to work through as you’re prepping potentially multiple encounters per session, so this is where xp_pool becomes useful.\nxp_pool returns the amount of XP the GM can ‘spend’ on monsters in a given encounter to ensure the difficulty is as desired based on the three factors identified above.\n\ndndR::xp_pool(party_level = 2, party_size = 4, difficulty = \"medium\")\n\n[1] 625\n\n\nIn the above case, the DM can have their four-person, level two party face creatures worth a total of 625 XP and be reasonably confident that the difficulty will be somewhere in the middle."
  },
  {
    "objectID": "encounter-balance.html#xp-multipliers",
    "href": "encounter-balance.html#xp-multipliers",
    "title": "Balancing Encounters",
    "section": "XP Multipliers",
    "text": "XP Multipliers\nHowever, while knowing the amount of XP available to the DM per encounter is helpful, it fails to account for the effect of the number of enemies. A fight versus a single monster worth 1000 XP is a very different proposition than a fight against four creatures each worth 250 XP even though the total XP is the same.\nThe DMG accounts for this by providing XP multipliers based on the number of monsters and the number of players. The same total monster XP is multiplied by a larger value for more monsters facing a smaller party than it would be for fewer monsters facing a larger party.\nSo, if you are using the DMG to balance an encounter you have to total up the XP of the monsters in an encounter and then go to a different part of the DMG where you can multiply that value by the multiplier in the relevant row of a second table which would then tell you the “actual” XP of the creatures you have selected. If you had too many or too few monsters you’d have to repeat this process iteratively until you identified the correct amount of “raw” XP to yield your desired “realized” XP in an encounter. Cumbersome, right?\ndndR’s xp_cost function provides an alternative to using the multiplier table. xp_cost requires the “raw” XP of the monsters you have selected, the number of monsters, and the number of player characters (PCs) and returns the “realized” XP. You can then quickly compare this with the value return by xp_pool to determine whether you need to add or remove creatures from your encounter.\n\ndndR::xp_cost(monster_xp = 1000, monster_count = 2, party_size = 3)\n\n[1] 1500"
  },
  {
    "objectID": "encounter-balance.html#balancing-demonstration",
    "href": "encounter-balance.html#balancing-demonstration",
    "title": "Balancing Encounters",
    "section": "Balancing Demonstration",
    "text": "Balancing Demonstration\nThat was a lot of content so let’s run through a quick example to see how xp_pool and xp_cost work together to make encounter balancing simpler. Let’s say I am running a game for four players, all level 3, and I want to design a hard encounter for them.\nTo begin, I’d identify the total XP I can spend to make an encounter of this difficulty using xp_pool.\n\ndndR::xp_pool(party_level = 3, party_size = 4, difficulty = 'hard')\n\n[1] 1112\n\n\nOkay, so the pool of XP available for me to spend is 1,112. Keeping that threshold in mind, I can use xp_cost to check the value of two monsters worth (total) 500 XP against that threshold.\n\ndndR::xp_cost(monster_xp = 500, monster_count = 2, party_size = 4)\n\n[1] 750\n\n\nI can see that I’m well under the XP threshold I have to play with so I can add a monster and see where that leaves me.\n\ndndR::xp_cost(monster_xp = 750, monster_count = 3, party_size = 4)\n\n[1] 1500\n\n\nA little over because of the multiplier, so let’s say I change my mind and keep three monsters but change their identity to one with a lower XP value.\n\ndndR::xp_cost(monster_xp = 600, monster_count = 3, party_size = 4)\n\n[1] 1200\n\n\nBasically right on target! I can now pick out my three monsters that total up to 600 XP raw and know that they will likely* make a hard encounter for my players! (* “Likely” because there is dice rolling involved and it is possible that the monsters roll well while my players roll badly or vice versa)."
  },
  {
    "objectID": "encounter-balance.html#xp_pool-versus-the-dmg",
    "href": "encounter-balance.html#xp_pool-versus-the-dmg",
    "title": "Balancing Encounters",
    "section": "xp_pool versus the DMG",
    "text": "xp_pool versus the DMG\nWhile the DMG uses a significant reference table to figure out the experience point threshold of a given encounter, my function doesn’t!\nThe DMG specifies the XP threshold per player for a given difficulty and asks DMs to find those numbers for each party member and then add them together. xp_pool on the other hand, asks for the average player level and the party size. This difference keeps the function streamlined and flexible for parties of any size.\nRather than embedding the DMG’s table for encounter XP, xp_pool actually uses the formula for the line defining the XP-party level curve implicit in the DMG (I’m even more of a dork than creating this R package would suggest). This has the added benefit of being able to handle non-integer values for average party_level.\nBelow is a comparison of the DMG’s XP-to-party level curve (in red) versus the one obtained by xp_pool (in blue)."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to dndR!",
    "section": "",
    "text": "I am a big fan of both R and Dungeons and Dragons so I thought it would be a fun test of my coding skills to build an R package that supports this hobby! dndR includes several functions that can be broadly divided between functions for both players and dungeon masters (DMs) and functions that are intended primarily for DMs.\nMy hope for this R package is that you would be able to have an R or RStudio window open while you are playing (or preparing for a session) and could use it to help with some of the fundamental repeated operations in D&D. When I play or DM D&D I often use a virtual tabletop (VTT) and I use this package to complement those systems rather than try to replace them."
  },
  {
    "objectID": "index.html#installing-dndr",
    "href": "index.html#installing-dndr",
    "title": "Welcome to dndR!",
    "section": "Installing dndR",
    "text": "Installing dndR\nTo install the development version of this package, run the following code:\n\n# install.packages(\"devtools\")\ndevtools::install_github(\"njlyon0/dndR\")\n\nI plan on submitting this package to CRAN in the future but for now the dev version is all that exists. I hope that doesn’t discourage you from using dndR!"
  },
  {
    "objectID": "index.html#encounter-a-problem",
    "href": "index.html#encounter-a-problem",
    "title": "Welcome to dndR!",
    "section": "Encounter a Problem?",
    "text": "Encounter a Problem?\nIf any of these functions break for you (or if you have a cool idea for a new function!), please post a GitHub Issue and I’ll tweak the code ASAP. If you’re posting an Issue because of a bug, including a reproducible example will be really helpful to me and will make it quicker to identify and fix whatever the issue was."
  },
  {
    "objectID": "dice.html",
    "href": "dice.html",
    "title": "Dice Rolling",
    "section": "",
    "text": "Dice names are abbreviated as the number of dice to roll], a lowercase “d”, and the type of dice to roll\nFor instance, to roll 3 six-sided dice we could do the following:\n\ndndR::roll(dice = '3d6')\n\n[1] 13\n\n\nThe roll function returns the total of the side of the dice as a number so if you want to add multiple rolls together you can treat the function calls themselves as if they are numbers!\n\ndndR::roll('3d8') + dndR::roll('1d4')\n\n[1] 14\n\n\nAlso, rolling two 20-sided dice (i.e., “2d20”) is automatically assumed to be rolling with either advantage or disadvantage so it will return a message to that effect and both numbers.\n\ndndR::roll(dice = '2d20')\n\nAssuming you're rolling for (dis)advantage so both rolls returned\n\n\n  roll_1 roll_2\n1      8     12"
  },
  {
    "objectID": "create-monsters.html",
    "href": "create-monsters.html",
    "title": "Monster Creation",
    "section": "",
    "text": "Creatures that you create (or “homebrew”) can be a great way to add flavor to an encounter or can even form the centerpiece of a larger campaign arc! dndR’s monster_stats and monster_creator functions can help DMs to quickly stat out their custom monsters"
  },
  {
    "objectID": "create-monsters.html#finding-official-monster-statistics",
    "href": "create-monsters.html#finding-official-monster-statistics",
    "title": "Monster Creation",
    "section": "Finding Official Monster Statistics",
    "text": "Finding Official Monster Statistics\nThe DMG provides a table (see p. 274) that gives the vital statistics of creatures based on their Challenge Rating (CR) but this table can be cumbersome to compare to Experience Points (you know, the things used to determine how hard an encounter will be for your party?).\nmonster_stats streamlines this process by allowing you to either\n\nInput the XP you want to spend on this creature (you can use the value returned by xp_cost)\n\nOR\n\nInput the challenge rating (CR) if you know it.\n\nOnce either XP or CR is provided, monster_stats returns the creature’s statistics as they appear in the DMG for a single creature of that difficulty.\n\ndndR::monster_stats(cr = 7)\n\n  Challenge DMG_XP Prof_Bonus Armor_Class HP_Range HP_Average Attack_Bonus\n1         7   2900          3          15  161-175        168            6\n  Save_DC\n1      15\n\n\nChallenge Rating is more than a little esoteric so feel free to ignore that argument entirely if XP is more comfortable for you! Note that XP is rounded down to the nearest specified monster “tier” specified in the DMG.\n\ndndR::monster_stats(xp = 8000)\n\n  Challenge DMG_XP Prof_Bonus Armor_Class HP_Range HP_Average Attack_Bonus\n1        11   7200          4          17  221-235        228            8\n  Save_DC\n1      17\n\n\nIf you specify both CR and XP, the function prints a warning and proceeds only with CR (i.e., ignoring whatever you put in as XP). I figured if a user is confident enough to put CR at all it should be given priority but am happy to tweak this if desired!\n\ndndR::monster_stats(xp = 1000, cr = 4)\n\nCR and XP both specified, proceeding with CR\n\n\n  Challenge DMG_XP Prof_Bonus Armor_Class HP_Range HP_Average Attack_Bonus\n1         4   1100          2          14  116-130        123            5\n  Save_DC\n1      14"
  },
  {
    "objectID": "create-monsters.html#making-custom-monsters",
    "href": "create-monsters.html#making-custom-monsters",
    "title": "Monster Creation",
    "section": "Making Custom Monsters",
    "text": "Making Custom Monsters\nIf you’d rather take a more individualized approach, you can use monster_creator instead. This function follows the advice of Zee Bashew on how to build interesting, challenging monsters for your party. These monsters are built somewhat according to the Dungeon Master’s Guide for creating monsters, partly Zee’s YouTube video on homebrewing monsters based on the videogame The Witcher, and partly on my own intuition about scaling the difficulty of a creature.\nCreatures made by monster_creator have the following information in addition to the statistics returned by monster_stats:\n\nUp to five damage resistances\nUp to two damage immunities\nOne vulnerability\nProficiency in two saving throws\nFully custom ability scores (returned only as their modifiers)\n\nThis combination allows you to build complex and mysterious homebrew monsters with plenty of opportunities for the party to have to investigate around to discover the monster’s strengths and weaknesses before the final showdown.\n\ndndR::monster_creator(party_level = 5, party_size = 4)\n\n            statistic                                            value\n1          Hit_Points                                               92\n2         Armor_Class                                               16\n3          Prof_Bonus                                                3\n4        Attack_Bonus                                                7\n5             Save_DC                                               16\n6  Prof_Saving_Throws                                         INT; CHA\n7           Immune_to                                 force; lightning\n8        Resistant_to bludgeoning; psychic; radiant; thunder; necrotic\n9       Vulnerable_to                                           poison\n10                STR                                               +1\n11                DEX                                               +1\n12                CON                                               +2\n13                INT                                               +1\n14                WIS                                               +2\n15                CHA                                               +1\n\n\nCreature’s special traits are chosen randomly so you may want to re-run the function several times (or mentally modify one or more parts of the output) to get a monster that fits your campaign and players.\nNote that if you use monster_creator you may want to help your players identify the creature’s immunities and vulnerabilities before the actual confrontation with the creature to avoid sending them into a fight that is more difficult than your party can handle."
  },
  {
    "objectID": "create-monsters.html#cr_convert-versus-the-dmg",
    "href": "create-monsters.html#cr_convert-versus-the-dmg",
    "title": "Monster Creation",
    "section": "cr_convert versus the DMG",
    "text": "cr_convert versus the DMG\ncr_convert is the dndR function embedded in the monster_stats function and is what allows that function to handle either CR or XP inputs.\nThe DMG specifies the XP value of a monster of any CR from 0 to 30 so cr_convert uses the formula of that line to avoid querying the table for this conversion.\nBelow is a comparison of the DMG’s XP-to-CR curve (in pink) versus the one obtained by cr_convert (in green)."
  },
  {
    "objectID": "create-characters.html",
    "href": "create-characters.html",
    "title": "Character Creation",
    "section": "",
    "text": "Whether you’re just starting a campaign or you’re frantically trying to roll stats for your backup character after the tragic end of your now past character (RIP), creating a new Dungeons & Dragons character happens more than you might think! dndR includes a few functions to help streamline this process."
  },
  {
    "objectID": "create-characters.html#start-to-finish-creation",
    "href": "create-characters.html#start-to-finish-creation",
    "title": "Character Creation",
    "section": "Start-to-Finish Creation",
    "text": "Start-to-Finish Creation\nFor the ‘just create my character’ crowd, pc_creator rolls for a character’s ability scores (strength, dexterity, constitution, intelligence, wisdom, and charisma) given a particular class, race, and preferred method of rolling for ability scores.\n\ndndR::pc_creator(class = \"barbarian\", race = \"half orc\", score_method = \"4d6\", quiet = TRUE)\n\n  ability raw_score race_modifier score roll_modifier\n1     STR        16             2    18            +4\n2     DEX         9             0     9            -1\n3     CON        14             1    15            +2\n4     INT        12             0    12            +1\n5     WIS        13             0    13            +1\n6     CHA         9             0     9            -1\n\n\nThe highest two scores are assigned based on the “quick build” recommendations in the source material (e.g., if you’re a fighter, the Player’s Handbook recommends making your top score strength and next best score constitution). The remaining four scores are assigned randomly.\nYou can check which classes and races are currently supported by pc_creator by running dndR::dnd_classes() or dndR::dnd_races(). If you have a class/race in mind that isn’t supported you can post a GitHub Issue and I’ll add that class/race’s stats to the function ASAP!\nThe quiet argument (default is FALSE) returns a warning message if any ability score is under an 8 or the total of all scores is under 70. I have had a lot of fun playing characters that have absolutely awful ability scores but I know that some tables use these thresholds to figure out whether it would be okay for you to re-roll and hope the dice are kinder to you."
  },
  {
    "objectID": "create-characters.html#class-only",
    "href": "create-characters.html#class-only",
    "title": "Character Creation",
    "section": "Class Only",
    "text": "Class Only\nIf you know the class you want your character to be but don’t want to worry about race-based modifiers at this point, use the class_block function instead of pc_creator. This function also assigns scores to abilities based on the source material’s quick build recommendations.\n\nclass_block(class = \"wizard\", score_method = \"4d6\", quiet = TRUE)\n\n  ability score\n1     STR    12\n2     DEX    12\n3     CON    16\n4     INT    18\n5     WIS    12\n6     CHA     9\n\n\nAlso like pc_creator, it only works with supported classes so run dndR::dnd_classes() to see which classes I have currently built in."
  },
  {
    "objectID": "create-characters.html#only-roll-the-dice",
    "href": "create-characters.html#only-roll-the-dice",
    "title": "Character Creation",
    "section": "Only Roll the Dice",
    "text": "Only Roll the Dice\nIf you’d rather assign your ability scores yourself (or are waiting for me to respond to your GitHub Issue asking me to add support for your PC’s race or class), you can run the simpler ability_scores function.\nThis function uses your desired method for rolling ability scores (same as pc_creator), but doesn’t attempt to assign those scores to the six abilities or account for race- or class-based modifiers to particular scores.\n\ndndR::ability_scores(method = \"4d6\", quiet = TRUE)\n\n  ability score\n1      V1     8\n2      V2    14\n3      V3    11\n4      V4    14\n5      V5     5\n6      V6    12"
  }
]